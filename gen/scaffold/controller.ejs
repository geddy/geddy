var <%= names.constructor.plural %> = function () {
  this.respondsWith = ['html', 'json', 'xml', 'js', 'txt'];
  this.apiFormats = ['json','xml','js','txt'];

  this.index = function (req, resp, params) {
    var self = this;

    geddy.model.<%= names.constructor.singular %>.all(function(err, <%= names.property.plural %>) {
      self.respond({params: params, <%= names.property.plural %>: <%= names.property.plural %>});
    });
  };
<% if(!bare) { %>
  this.add = function (req, resp, params) {
    this.respond({params: params});
  };

  this.create = function (req, resp, params) {
    var self = this
      , onError = { redirect: {controller: "<%= names.property.plural %>", action: "add"} }
      , onSuccess = { redirect: {controller: "<%= names.property.plural %>"} }
      , <%= names.property.singular %> = geddy.model.<%= names.constructor.singular %>.create(params);

    if (!<%= names.property.singular %>.isValid()) {
      self.displayError(<%= names.property.singular %>.errors, onError);
    }
    else {
      <%= names.property.singular %>.save(function(err, data) {
        if (err) {
          self.displayError(err, onError);
        }
        else {
          onSuccess.redirect.id = data.id;
          params.id = data.id;
          
          self.displaySuccess("<%= names.constructor.singular %> Created", onSuccess);
        }
      });
    }
  };

  this.show = function (req, resp, params) {
    var self = this;
    
    if(!params.id) {
        self.respond({
          params: params
        , errors:self.flash.error()
        });
      return;
    }

    geddy.model.<%= names.constructor.singular %>.first(params.id, function(err, <%= names.property.singular %>) {
      if (!<%= names.property.singular %>) {
        var err = new Error();
        err.statusCode = 404;
        self.error(err);
      }
      else {
          self.respond({
            params: params
          , <%= names.property.singular %>: <%= names.property.singular %>.toObj()
          , errors:self.flash.error()
          });
      }
    });
  };

  this.edit = function (req, resp, params) {
    var self = this;

    geddy.model.<%= names.constructor.singular %>.first(params.id, function(err, <%= names.property.singular %>) {
      if (!<%= names.property.singular %>) {
        var err = new Error();
        err.statusCode = 400;
        self.error(err);
      }
      else {
        self.respond({params: params, <%= names.property.singular %>: <%= names.property.singular %>});
      }
    });
  };

  this.update = function (req, resp, params) {
    var self = this
      , onError = {
          redirect: {controller: "<%= names.property.plural %>", action: "edit", id: params.id}
        }
      , onSuccess = {
          redirect: {controller: "<%= names.property.plural %>", id:params.id}
        };

    geddy.model.<%= names.constructor.singular %>.first(params.id, function(err, <%= names.property.singular %>) {
      <%= names.property.singular %>.updateProperties(params);
      if (!<%= names.property.singular %>.isValid()) {
        self.displayError(<%= names.property.singular %>.errors, onError);
      }
      else {
        <%= names.property.singular %>.save(function(err, data) {
          if (err) {
            self.displayError(err, onError);
          }
          else {
            self.displaySuccess("<%= names.constructor.singular %> Updated", onSuccess);
          }
        });
      }
    });
  };

  this.destroy = function (req, resp, params) {
    var self = this
      , onError = { redirect: {controller: "<%= names.property.plural %>", action: "edit", id: params.id} }
      , onSuccess = {
          redirect: {controller: "<%= names.property.plural %>", action: "index"}
        , transfer: null
        };

    geddy.model.<%= names.constructor.singular %>.remove(params.id, function(err) {
      if (err) {
        self.displayError(err, onError);
      }
      else {
        self.displaySuccess("<%= names.constructor.singular %> Deleted", onSuccess);
      }
    });
  };
<% } %>
};

exports.<%= names.constructor.plural %> = <%= names.constructor.plural %>;
