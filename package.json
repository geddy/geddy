{
  "name": "geddy",
  "description": "Web framework for Node.js",
  "keywords": [
    "Web",
    "framework",
    "REST",
    "MVC"
  ],
  "version": "0.4.5",
  "author": {
    "name": "Matthew Eernisse",
    "email": "mde@fleegix.org",
    "url": "http://fleegix.org"
  },
  "dependencies": {
    "jake": "0.3.x",
    "utilities": "0.0.x"
  },
  "bin": {
    "geddy": "./bin/cli.js"
  },
  "main": "./lib/geddy",
  "repository": {
    "type": "git",
    "url": "git://github.com/mde/geddy.git"
  },
  "preferGlobal": true,
  "devDependencies": {},
  "engines": {
    "node": "*"
  },
  "readme": "## Geddy web framework for Node.js\n- - -\n\n### Goals\n\n  * Easy to use\n  * Modular\n  * Fast\n\nGeddy should make things easy for the most basic applications,\nbut still let you get under the hood and tinker if you want.\n\n### Features\n\n  * Powerful, flexible router\n  * Easy resource-based routing\n  * App, resource and scaffold generators\n  * Content-negotiation\n  * Session support (in-memory, cookie)\n  * Multiple template engine support(EJS, Jade, Mustache, Handlebars)\n  * View helpers([Docs](https://github.com/mde/geddy/wiki/View-Helpers))\n  * Fully non-blocking\n\n### License\n\nApache License, Version 2\n\n### Prerequisites\n\nGeddy requires version 0.6.x of Node.js or higher, and the\n[Jake](https://github.com/mde/jake) JavaScript build-tool.\n\n### Installing from Github\n\nTo get Geddy from Github and install it do:\n\n```\ngit clone git@github.com:mde/geddy.git\ncd geddy\nmake && sudo make install\n```\n\nBy default Geddy is installed in \"/usr/local.\" To install it into a\ndifferent directory (e.g., one that doesn't require super-user\nprivilege), pass the PREFIX variable to the `make install` command.\nFor example, to install it into a \"geddy\" directory in your home\ndirectory, you could use this:\n\n```\nmake && make install PREFIX=~/geddy\n```\n\nIf you do install Geddy somewhere special, you'll need to add the\n\"bin\" directory in the install target to your PATH to get access\nto the `geddy` executable.\n\n### Installing with [NPM](http://npmjs.org/)\n\n```\n[sudo] npm -g install geddy\n```\n\nNote: Geddy (specifically, the generators) is a system-level\ntool, and wants to be installed globally.\n\n### Creating a Geddy application\n\nTo create Geddy applications simply run `geddy app <name>`.\nThen you can run `geddy` inside the application to start the server.\n\n```\nmde@localhost:~/work$ geddy app bytor\nCreated app bytor.\nmde@localhost:~/work$ cd bytor\nmde@localhost:~/work/bytor$ geddy\nServer running at http://127.0.0.1:4000/\n```\n\nGo to http://localhost:4000/, and you should see the introduction page.\n\n### Generating resources\n\nUse `geddy resource <name> [model properties]` to generate a resource in your application.\nResources do not generate views, but creates a view directory. A resource route will be\ncreated for you.\n\n````\nmde@localhost:~/work$ geddy resource snow_dog breed:string name:string color:string\n[Added] app/models/snow_dog.js\n[Added] app/controllers/snow_dogs.js\n[Added] Resource snow_dogs route added to config/router.js\n[Added] snow_dogs view directory\n```\n\nNow start your Geddy server and your new route will work. Trying this for example\nwill return the params for the index action in JSON:\n\n```\n$ curl localhost:4000/snow_dogs.json\n{\"params\":{\"method\":\"GET\",\"controller\":\"SnowDogs\",\"action\":\"index\",\"format\":\"json\"}}\n```\n\nGeddy generators handle plural inflections for model and controller names. ex: 'person' to 'people'\nTo read about the model properties argument jump to [Model properties](#model-properties)\n\n### Generating scaffolding\n\nUse `geddy scaffold <name> [model properties]` to generate scaffoling in your application.\nScaffolding creates full CRUD actions includes views, and will default your configuration to use\n[Mongodb](http://www.mongodb.org/) Resource routes will be created for you.\n\n````\nmde@localhost:~/work$ geddy resource snow_dog breed:string name:string color:string\n[Added] app/models/snow_dog.js\n[Added] app/controllers/snow_dogs.js\n[Added] Resource snow_dogs route added to config/router.js\n[Added] View templates\n[Added] Database configuration to config/environment.js\n```\n\nNow start your Geddy server and you'll have new views created from scaffolding. Trying this for example\nwill return the content for the index action in HTML:\n\n```\n$ curl localhost:4000/snow_dogs\n<!DOCTYPE html>\n<html lang=\"en\">\n  <head>\n    <meta charset=\"utf-8\">\n    <title>Geddy App | This app uses Geddy.js</title>\n    <meta name=\"description\" content=\"\">\n    <meta name=\"author\" content=\"\">\n\n    <meta name=\"viewport\" content=\"width=device-width\" />\n\n    <!-- The HTML5 shim, for IE6-8 support of HTML elements -->\n    <!--[if lt IE 9]>\n      <script src=\"http://html5shim.googlecode.com/svn/trunk/html5.js\"></script>\n    <![endif]-->\n\n.....\n```\n\nGeddy generators handle plural inflections for model and controller names. ex: 'person' to 'people'\nTo read about the model properties argument jump to [Model properties](#model-properties)\n\n### Model properties\n\nSome Geddy generators (resource, scaffold and model) have a argument that takes a list of model\nproperties. Here's an example of a resource with some properties:\n\n```\ngeddy resource user name admin:boolean lastLogin:datetime\n```\n\nEach of these items include a name and an optional type, if there's no type given it'll default\nto string. The list of supported types are listed in the [model](https://github.com/mde/geddy/wiki/Models) documentation.\nIf no id property is given then a default id property will be created with the type of string.\n\nYou can also use custom default properties:\n```\ngeddy resource user name:default admin:boolean\n```\nThe above example will use the property `name`(string) to display the items in the views instead of the default ID property, this way when generating scaffolds, it will look better out of the box.\n\n### Routes\n\nRoutes are created in a similar fashion to Merb or Rails.\n\n***Basic routes***\n```\nrouter.match('/moving/pictures/:id').to(\n  {controller: 'Moving', action: 'pictures'});\n\nrouter.match('/farewells/:farewelltype/kings/:kingid').to(\n   {controller: 'Farewells', action: 'kings'});\n\n//Can also match specific HTTP methods only\nrouter.match('/xandadu', 'get').to(\n  {controller: 'Xandadu', action: 'specialHandler'});\n```\n\n***Resource routes***\n```\nrouter.resource('hemispheres');\n```\n\n### Resources and controllers\n\nGeddy's resource-based routes create url/request-method mappings\nfor easy CRUD operations like this:\n\nGET */snow_dogs[.extension]<br/>\n(SnowDogs controller, index action)\n\nGET */snow_dogs/add[.extension]<br/>\n(SnowDogs controller, add action, for any new-resource template\n-- \"new\" is not usable as a JavaScript action name)\n\nPOST */snow_dogs[.extension]<br/>\n(SnowDogs controller, create action)\n\nGET */snow_dogs/:id[.extension]<br/>\n(SnowDogs controller, show action)\n\nGET */snow_dogs/:id/edit[.extension]<br/>\n(SnowDogs controller, edit action)\n\nPUT */snow_dogs/:id[.extension]<br/>\n(SnowDogs controller, update action)\n\nDELETE */snow_dogs/:id[.extension]<br/>\n(SnowDogs controller, remove action)\n\nA simple controller that just responds with any\nform-post/query-string params looks like this:\n\n```javascript\nvar SnowDogs = function () {\n  this.respondsWith = ['text', 'json', 'html'];\n\n  this.index = function (params) {\n    this.respond({params: params});\n  };\n\n  this.add = function (params) {\n    this.respond({params: params});\n  };\n\n  this.create = function (params) {\n    this.respond({params: params});\n  };\n\n  this.show = function (params) {\n    this.respond({params: params});\n  };\n\n  this.update = function (params) {\n    this.respond({params: params});\n  };\n\n  this.remove = function (params) {\n    this.respond({params: params});\n  };\n\n};\n\nexports.SnowDogs = SnowDogs;\n```\n\n## Content-negotiation\n\nGeddy can perform content-negotiation, and respond with with the\ncorrect format based on the requested filename-extension.\n\nIf you have a JSON-serializable JavaScript object you want to\nreturn in JSON format, pass your JavaScript object to the\n`respond` method in the action on that controller.\n\n```javascript\nthis.respondsWith = ['text', 'json'];\n\nthis.show = function (params) {\n  item = {foo: 'FOO', bar: 1, baz: false};\n  this.respond(item);\n};\n```\n## Models and validations\n\nGeddy has a simple way of defining models, with a full-featured\nset of data validations. The syntax is similar to models in\nRuby's ActiveRecord or DataMapper.\n\nHere is an example of a model with some validations:\n\n```javascript\nvar User = function () {\n  this.property('login', 'string', {required: true});\n  this.property('password', 'string', {required: true});\n  this.property('lastName', 'string');\n  this.property('firstName', 'string');\n\n  this.validatesPresent('login');\n  this.validatesFormat('login', /[a-z]+/, {message: 'Subdivisions!'});\n  this.validatesLength('login', {min: 3});\n  this.validatesConfirmed('password', 'confirmPassword');\n  this.validatesWithFunction('password', function (s) {\n      // Something that returns true or false\n      return s.length > 0;\n  });\n\n  // Can define methods for instances like this\n  this.someMethod = function () {\n    // Do some stuff\n  };\n};\n\n// Can also define them on the prototype\nUser.prototype.someOtherMethod = function () {\n  // Do some other stuff\n};\n\nUser = geddy.model.registerModel('User', User);\n```\n\nAlternatively, you can use the `defineProperties` method to lay out your model:\n\n```javascript\nvar User = function () {\n  this.defineProperties({\n    login: {type: 'string', required: true}\n  , password: {type: 'string', required: true}\n  , lastName: {type: 'string'}\n  , firstName: {type: 'string'}\n  });\n}\n```\n\nCreating an instance of one of these models is easy:\n\n```javascript\nvar params = {\n  login: 'alex'\n, password: 'lerxst'\n, lastName: 'Lifeson'\n, firstName: 'Alex'\n};\nvar user = User.create(params);\n```\n\nData-validation happens on the call to `create`, and any\nvalidation errors show up inside an `errors` property on\nthe instance, keyed by field name. Instances have a `valid`\nmethod that returns a Boolean indicating whether the instance\nis valid.\n\n```javascript\n// Leaving out the required password field\nvar params = {\n  login: 'alex'\n};\nvar user = User.create(params);\n\n// Prints 'false'\nutil.puts(user.valid());\n// Prints 'Field \"password\" is required'\nutil.puts(user.errors.password);\n```\n\n## Running the tests\n\nIn the geddy project directory, run `jake test`. The tests simply\nuse NodeJS's `assert` library, which throws an error on failure.\nIf there are no errors, the tests all ran successfully.\n\n## API Docs\n\nAPI docs [can be found here](http://mde.github.com/geddy/doc/).\n\n- - -\nGeddy Web-app development framework copyright 2112\nmde@fleegix.org.\n\n",
  "_id": "geddy@0.4.5",
  "_from": "geddy"
}
